require('dotenv').config();
const express = require('express');
const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');
const app = express();

// Initialize OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, '../web/static')));
app.set('views', path.join(__dirname, '../web/templates'));
app.set('view engine', 'ejs');

// Load game data
const gameData = JSON.parse(fs.readFileSync(path.join(__dirname, '../data/game_info.json'), 'utf-8'));

// Function to find games by genre
function findGamesByGenre(genre) {
    return gameData.games.filter(game => 
        game.genre.toLowerCase().includes(genre.toLowerCase())
    );
}

// Function to format game list
function formatGameList(games, lang = 'th') {
    if (games.length === 0) return null;
    
    const gameList = games.map(game => 
        `- ${game.title} (${game.platform})`
    ).join('\n');

    return `‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n${gameList}\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?`;
}

// Function to analyze platform query
function analyzePlatformQuery(query) {
    const platforms = {
        'pc': ['pc', 'computer', 'windows', '‡∏Ñ‡∏≠‡∏°', '‡∏û‡∏µ‡∏ã‡∏µ'],
        'ps5': ['ps5', 'playstation 5', '‡πÄ‡∏û‡∏•‡∏¢‡πå 5'],
        'ps4': ['ps4', 'playstation 4', '‡πÄ‡∏û‡∏•‡∏¢‡πå 4'],
        'switch': ['switch', 'nintendo', '‡∏ô‡∏¥‡∏ô‡πÄ‡∏ó‡∏ô‡πÇ‡∏î', '‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå'],
        'xbox': ['xbox', '‡πÄ‡∏≠‡πá‡∏Å‡∏ö‡∏≠‡∏Å']
    };

    for (const [platform, keywords] of Object.entries(platforms)) {
        if (keywords.some(keyword => query.toLowerCase().includes(keyword))) {
            return platform;
        }
    }
    return null;
}

// Function to find games by platform
function findGamesByPlatform(platform) {
    return gameData.games.filter(game => 
        game.platform.toLowerCase().includes(platform.toLowerCase())
    );
}

// Function to generate platform-specific response
function generatePlatformResponse(platform, games, lang = 'th') {
    if (games.length === 0) return null;

    const gamesByRating = [...games].sort((a, b) => (b.rating || 0) - (a.rating || 0));
    const topGames = gamesByRating.slice(0, 3);

    let response = `‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${platform.toUpperCase()}:\n\n`;
    
    topGames.forEach(game => {
        response += `üéÆ ${game.title}\n`;
        if (game.rating) response += `‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${game.rating}/100\n`;
        if (game.price) response += `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${game.price} ‡∏ö‡∏≤‡∏ó\n`;
        response += `üìù ${game.description}\n`;
        if (game.features) response += `üéØ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô: ${game.features.join(', ')}\n`;
        if (game.multiplayer) response += `üë• ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô\n`;
        response += '\n';
    });

    response += `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?`;
    return response;
}

// Function to retrieve relevant game information
function getRelevantGameInfo(query) {
    // Check for platform-specific query
    const platform = analyzePlatformQuery(query);
    if (platform) {
        const platformGames = findGamesByPlatform(platform);
        if (platformGames.length > 0) {
            return { 
                type: 'platform', 
                data: platformGames,
                platform: platform 
            };
        }
    }

    // Check for genre query
    const genreKeywords = ['‡πÅ‡∏ô‡∏ß', 'genre', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', 'rpg', 'action', 'fps', 'mmorpg'];
    const isGenreQuery = genreKeywords.some(keyword => 
        query.toLowerCase().includes(keyword.toLowerCase())
    );

    if (isGenreQuery) {
        const genres = ['RPG', 'Action', 'FPS', 'MMORPG', 'Adventure', 'Sandbox'];
        const matchedGenre = genres.find(genre => 
            query.toLowerCase().includes(genre.toLowerCase())
        );

        if (matchedGenre) {
            const gamesByGenre = findGamesByGenre(matchedGenre);
            if (gamesByGenre.length > 0) {
                return { type: 'genre', data: gamesByGenre };
            }
        }
    }

    // Regular game search
    const games = gameData.games.filter(game => 
        game.title.toLowerCase().includes(query.toLowerCase()) ||
        game.description.toLowerCase().includes(query.toLowerCase())
    );

    return { type: 'game', data: games };
}

// Function to detect language
function detectLanguage(text) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const thaiPattern = /[\u0E00-\u0E7F]/;
    return thaiPattern.test(text) ? 'th' : 'en';
}

// Function to format game information based on language
function formatGameInfo(games, lang = 'th') {
    return games.map(game => {
        const lines = [
            lang === 'th' ? '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°:' : 'Game Information:',
            `${lang === 'th' ? '‡∏ä‡∏∑‡πà‡∏≠' : 'Title'}: ${lang === 'th' && game.title_th ? game.title_th : game.title}`,
            `${lang === 'th' ? '‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°' : 'Platform'}: ${game.platform}`,
            `${lang === 'th' ? '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó' : 'Genre'}: ${lang === 'th' && game.genre_th ? game.genre_th : game.genre}`,
            `${lang === 'th' ? '‡∏ß‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢' : 'Release Date'}: ${game.release_date}`,
            `${lang === 'th' ? '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' : 'Description'}: ${lang === 'th' && game.description_th ? game.description_th : game.description}`,
            `${lang === 'th' ? '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô' : 'Player Count'}: ${lang === 'th' && game.player_count_th ? game.player_count_th : game.player_count}`,
            `${lang === 'th' ? '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' : 'Rating'}: ${game.rating}/100`,
            `${lang === 'th' ? '‡∏£‡∏≤‡∏Ñ‡∏≤' : 'Price'}: ${game.price} ${lang === 'th' ? '‡∏ö‡∏≤‡∏ó' : 'THB'}`,
            `${lang === 'th' ? '‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô' : 'Features'}: ${lang === 'th' && game.features_th ? game.features_th.join(', ') : game.features.join(', ')}`
        ];

        if (game.system_requirements) {
            lines.push(
                lang === 'th' ? '\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö:' : '\nSystem Requirements:',
                lang === 'th' ? '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥:' : 'Minimum:',
                `- OS: ${game.system_requirements.minimum.os}`,
                `- CPU: ${game.system_requirements.minimum.cpu}`,
                `- GPU: ${game.system_requirements.minimum.gpu}`,
                `- RAM: ${game.system_requirements.minimum.ram}`,
                lang === 'th' ? '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:' : 'Recommended:',
                `- OS: ${game.system_requirements.recommended.os}`,
                `- CPU: ${game.system_requirements.recommended.cpu}`,
                `- GPU: ${game.system_requirements.recommended.gpu}`,
                `- RAM: ${game.system_requirements.recommended.ram}`
            );
        }

        return lines.join('\n');
    }).join('\n\n');
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
function analyzeQuery(query) {
    // ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const keywords = {
        genre: ['‡πÅ‡∏ô‡∏ß', 'genre', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', 'style', 'type'],
        price: ['‡∏£‡∏≤‡∏Ñ‡∏≤', 'price', 'cost', '‡πÅ‡∏û‡∏á', '‡∏ñ‡∏π‡∏Å'],
        rating: ['rating', 'score', 'review', '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô', '‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'],
        multiplayer: ['multiplayer', '‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô', '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', 'coop', '‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'],
        similar: ['‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô', '‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢', 'similar', '‡πÅ‡∏ô‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö', '‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö'],
        compare: ['‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö', 'compare', 'vs', '‡∏´‡∏£‡∏∑‡∏≠', '‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤', '‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á'],
        recommendation: ['‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', 'recommend', '‡∏ô‡πà‡∏≤‡πÄ‡∏•‡πà‡∏ô', '‡∏î‡∏µ‡πÑ‡∏´‡∏°', '‡∏Ñ‡∏ß‡∏£‡∏ã‡∏∑‡πâ‡∏≠']
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    for (const [type, keywordList] of Object.entries(keywords)) {
        if (keywordList.some(keyword => query.toLowerCase().includes(keyword.toLowerCase()))) {
            return type;
        }
    }
    return 'general';
}

function generateResponse(type, query, games, lang = 'th') {
    switch (type) {
        case 'price':
            return formatPriceResponse(games, lang);
        case 'rating':
            return formatRatingResponse(games, lang);
        case 'multiplayer':
            return formatMultiplayerResponse(games, lang);
        case 'similar':
            return formatSimilarGamesResponse(games, lang);
        case 'compare':
            return formatComparisonResponse(games, lang);
        case 'recommendation':
            return formatRecommendationResponse(games, lang);
        default:
            return formatGameInfo(games, lang);
    }
}

function formatPriceResponse(games, lang = 'th') {
    const priceList = games.map(game => 
        `${game.title}: ${game.price} ${lang === 'th' ? '‡∏ö‡∏≤‡∏ó' : 'THB'}`
    ).join('\n');
    return `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Å‡∏°:\n${priceList}`;
}

function formatRatingResponse(games, lang = 'th') {
    const ratingList = games.map(game => 
        `${game.title}: ${game.rating}/100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`
    ).join('\n');
    return `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:\n${ratingList}`;
}

function formatMultiplayerResponse(games, lang = 'th') {
    return games.map(game => 
        `${game.title}: ${game.multiplayer ? '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô' : '‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'}`
    ).join('\n');
}

function formatSimilarGamesResponse(games, lang = 'th') {
    return games.map(game => 
        `‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö ${game.title}:\n${game.similar_games.join(', ')}`
    ).join('\n\n');
}

function formatRecommendationResponse(games, lang = 'th') {
    const recommendations = games.map(game => 
        `${game.title}\n- Rating: ${game.rating}/100\n- ${game.description}\n- ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô: ${game.features.join(', ')}`
    ).join('\n\n');
    return `‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n${recommendations}`;
}

// Routes
app.get('/', (req, res) => {
    res.render('index');
});

app.post('/chat', async (req, res) => {
    try {
        const userMessage = req.body.message;
        const lang = detectLanguage(userMessage);
        const queryType = analyzeQuery(userMessage);
        const searchResult = getRelevantGameInfo(userMessage);

        let responseText;

        if (searchResult.data.length > 0) {
            if (searchResult.type === 'platform') {
                responseText = generatePlatformResponse(searchResult.platform, searchResult.data, lang);
            } else if (searchResult.type === 'genre') {
                responseText = formatGameList(searchResult.data, lang);
            } else {
                responseText = generateResponse(queryType, userMessage, searchResult.data, lang);
            }
        } else {
            const prompt = lang === 'th' ? 
                `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ: ${userMessage}` :
                `You are a gaming expert. Please answer this question: ${userMessage}`;

            const completion = await openai.chat.completions.create({
                model: "gpt-4",
                messages: [
                    {
                        "role": "system", 
                        "content": lang === 'th' ?
                            "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠" :
                            "You are a gaming expert who provides detailed and friendly advice. Always respond in English."
                    },
                    {"role": "user", "content": prompt}
                ]
            });
            responseText = completion.choices[0].message.content;
        }
        
        res.json({ response: responseText });
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ 
            error: detectLanguage(req.body.message) === 'th' ? 
                '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•' : 
                'Sorry, an error occurred'
        });
    }
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
}); 